$date
	Sat Nov 30 15:59:56 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module full_test $end
$var wire 4 ! S_out [3:0] $end
$var wire 1 " C4_out $end
$var reg 4 # A_in [3:0] $end
$var reg 4 $ B_in [3:0] $end
$var reg 1 % C0_in $end
$var reg 1 & clk $end
$scope module uut $end
$var wire 4 ' A_in [3:0] $end
$var wire 4 ( B_in [3:0] $end
$var wire 1 % C0_in $end
$var wire 1 & clk $end
$var wire 4 ) S_wire [3:0] $end
$var wire 4 * S_out [3:0] $end
$var wire 1 + Cout_wire $end
$var wire 1 " C4_out $end
$var wire 1 , C0_reg $end
$var wire 4 - B_reg [3:0] $end
$var wire 4 . A_reg [3:0] $end
$scope module cla $end
$var wire 4 / a [3:0] $end
$var wire 4 0 b [3:0] $end
$var wire 1 1 c1 $end
$var wire 1 2 c2 $end
$var wire 1 3 c3 $end
$var wire 1 + cout $end
$var wire 1 4 temp1 $end
$var wire 1 5 temp10 $end
$var wire 1 6 temp2 $end
$var wire 1 7 temp3 $end
$var wire 1 8 temp4 $end
$var wire 1 9 temp5 $end
$var wire 1 : temp6 $end
$var wire 1 ; temp7 $end
$var wire 1 < temp8 $end
$var wire 1 = temp9 $end
$var wire 4 > sum [3:0] $end
$var wire 4 ? p [3:0] $end
$var wire 4 @ g [3:0] $end
$var wire 1 , cin $end
$upscope $end
$scope module dff_a0 $end
$var wire 1 & clk $end
$var wire 1 A d $end
$var reg 1 B q $end
$upscope $end
$scope module dff_a1 $end
$var wire 1 & clk $end
$var wire 1 C d $end
$var reg 1 D q $end
$upscope $end
$scope module dff_a2 $end
$var wire 1 & clk $end
$var wire 1 E d $end
$var reg 1 F q $end
$upscope $end
$scope module dff_a3 $end
$var wire 1 & clk $end
$var wire 1 G d $end
$var reg 1 H q $end
$upscope $end
$scope module dff_b0 $end
$var wire 1 & clk $end
$var wire 1 I d $end
$var reg 1 J q $end
$upscope $end
$scope module dff_b1 $end
$var wire 1 & clk $end
$var wire 1 K d $end
$var reg 1 L q $end
$upscope $end
$scope module dff_b2 $end
$var wire 1 & clk $end
$var wire 1 M d $end
$var reg 1 N q $end
$upscope $end
$scope module dff_b3 $end
$var wire 1 & clk $end
$var wire 1 O d $end
$var reg 1 P q $end
$upscope $end
$scope module dff_c0 $end
$var wire 1 & clk $end
$var wire 1 % d $end
$var reg 1 , q $end
$upscope $end
$scope module dff_c4 $end
$var wire 1 & clk $end
$var wire 1 + d $end
$var reg 1 " q $end
$upscope $end
$scope module dff_s0 $end
$var wire 1 & clk $end
$var wire 1 Q d $end
$var reg 1 R q $end
$upscope $end
$scope module dff_s1 $end
$var wire 1 & clk $end
$var wire 1 S d $end
$var reg 1 T q $end
$upscope $end
$scope module dff_s2 $end
$var wire 1 & clk $end
$var wire 1 U d $end
$var reg 1 V q $end
$upscope $end
$scope module dff_s3 $end
$var wire 1 & clk $end
$var wire 1 W d $end
$var reg 1 X q $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xX
xW
xV
xU
xT
xS
xR
xQ
xP
0O
xN
0M
xL
0K
xJ
0I
xH
0G
xF
0E
xD
0C
xB
0A
bx @
bx ?
bx >
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
bx 0
bx /
bx .
bx -
x,
x+
bx *
bx )
b0 (
b0 '
0&
0%
b0 $
b0 #
x"
bx !
$end
#3000
1M
1E
1%
b100 $
b100 (
b100 #
b100 '
#5000
0+
0S
0U
1W
1Q
05
01
04
b1001 )
b1001 >
02
06
07
13
08
09
0:
0;
0<
0=
b100 @
b0 ?
0B
0D
1F
b100 .
b100 /
0H
0J
0L
1N
b100 -
b100 0
0P
1,
1&
#10000
0&
#15000
0"
1X
0V
0T
b1001 !
b1001 *
1R
1&
#20000
0&
#23000
